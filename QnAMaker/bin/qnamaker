#!/usr/bin/env node
const pkg = require('../package.json');
const semver = require('semver');
let requiredVersion = pkg.engines.node;
if (!semver.satisfies(process.version, requiredVersion)) {
    console.log(`Required node version ${requiredVersion} not satisfied with current version ${process.version}.`);
    process.exit(1);
}

global.fetch = require('node-fetch'); // Browser compatibility
const assert = require('assert');
const fs = require('fs-extra');
const path = require('path');
const readline = require('readline');
const readlineSync = require('readline-sync');
const minimist = require('minimist');
const chalk = require('chalk');

const help = require('../lib/help');
const qnamaker = require('../lib');
const manifest = require('../lib/api/qnamaker');
const cc = require('camelcase');

let args;

/**
 * Entry for the app
 *
 * @returns {Promise<void>}
 */
async function runProgram() {
    let argvFragment = process.argv.slice(2);
    if (argvFragment.length === 0) {
        argvFragment = ['-h'];
    }
    args = minimist(argvFragment);
    if (args.version || args.v) {
        return process.stdout.write(require(path.join(__dirname, '../package.json')).version);
    }

    if (args.init) {
        const result = await initializeConfig();
        if (result) {
            process.stdout.write(`Successfully wrote ${process.cwd()}/.qnamakerrc`);
        }
        return;
    }
    
    if (args.kbid) {
        args.knowledgeBaseID = args.kbid;
        delete args.kbid;
    }

    const config = await composeConfig();
    const serviceManifest = getServiceManifest(args);

    if (args.help || args.h) {
        return help(args, serviceManifest);
    }

    requestBody = await validateArguments(serviceManifest);

    // special case operations
    switch (serviceManifest.operation.methodAlias) {
        case "delete":
            let answer = readlineSync.question(`Are you sure you would like to delete this knowledgebase? [no] `, { defaultInput: 'no' });
            if (answer.trim()[0] == 'n') {
                process.stdout.write('operation canceled');
                return;
            }
            break;
    }

    const result = await qnamaker(config, serviceManifest, args, requestBody);
    if (result.error) {
        throw new Error(result.error.message);
    }

    // special case response
    switch (serviceManifest.operation.name) {
        case "createKnowledgeBase": {
            if (args.msbot) {
                process.stdout.write(JSON.stringify({
                    type: "qna",
                    name: `QnA KB`,
                    id : result.kbId,
                    kbid: result.kbId,
                    subscriptionKey: config.subscriptionKey
                }, null, 2));
            } else {
                process.stdout.write(JSON.stringify(result, null, 2));
            }
            if (!(args.q || args.quiet) && !args.msbot) {
                let answer = readlineSync.question(`\nWould you like to save ${result.kbId} in your .qnamakerrc so that future commands will be with this KB? [yes]`, { defaultInput: 'yes'});
                if (answer[0] == 'y'){
                    config.knowledgeBaseID = result.kbId;
                    await fs.writeJson(path.join(process.cwd(), '.qnamakerrc'), config, { spaces: 2 });
                    process.stdout.write('.qnamakerrc updated');
                }
            }
            break;
        }

        default: {
            // dump json as json stringified
            if (typeof result == 'string')
                process.stdout.write(result);
            else
                process.stdout.write(JSON.stringify(result, null, 2));
            break;
        }
    }
}

/**
 * Walks the user though the creation of the .qnamakerrc
 * file and writes it to disk. The knowledge base ID and subscription key
 * are optional but if omitted, --knowledgeBaseID and --subscriptionKey
 * flags may be required for some commands.
 *
 * @returns {Promise<*>}
 */
async function initializeConfig() {
    process.stdout.write(chalk.cyan.bold('\nThis util will walk you through creating a .qnamakerrc file\n\nPress ^C at any time to quit.\n\n'));
    const validRegions = 'westus westus2 eastus eastus2 westcentralus southcentralus westeurope northeurope southeastasia eastasia australiaeast brazilsouth'.split(' ');
    const questions = [
        'What is your QnA Maker Knowledge Base ID (from qnamaker.ai portal My services page)? ',
        'What is your QnA Maker Subscription key (from qnamaker.ai portal My services page)? ',
        `What region [${validRegions.join(', ')}]? `,
    ];

    const prompt = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });

    const answers = [];
    for (let i = 0; i < questions.length; i++) {
        const question = questions[i];
        const answer = await new Promise((resolve) => {

            function doPrompt(promptMessage) {
                prompt.question(promptMessage, response => {
                    if (i === 2 && (!response || !validRegions.includes(response))) {
                        doPrompt(chalk.red.bold(`${response} is not a valid region`) + '\n' + question);
                    } else {
                        resolve(response);
                    }
                });
            }

            doPrompt(question);
        });
        answers.push(answer);
    }

    const [knowledgeBaseID, subscriptionKey, location] = answers;
    const config = Object.assign({}, {
        knowledgeBaseID,
        subscriptionKey,
        endpointBasePath: `https://${location}.api.cognitive.microsoft.com/qnamaker/v2.0`,
    });
    try {
        await new Promise((resolve, reject) => {
            const confirmation = `\n\nDoes this look ok?\n${JSON.stringify(config, null, 2)}\nYes/No: `;
            prompt.question(confirmation, response => {
                /^(y|yes)$/.test((response || 'yes').toLowerCase()) ? resolve(response) : reject();
            });
        });
    } catch (e) {
        return false;
    }
    await fs.writeJson(path.join(process.cwd(), '.qnamakerrc'), config, { spaces: 2 });
    return true;
}

/**
 * Retrieves the input file to send as
 * the body of the request.
 *
 * @param args
 * @returns {Promise<*>}
 */
async function getFileInput(args) {
    if (typeof args.in !== 'string') {
        return null;
    }
    // Let any errors fall through to the runProgram() promise
    return await fs.readJson(path.resolve(args.in));
}

/**
 * Composes the config from the 3 sources that it may reside.
 * Precedence is 1. Arguments, 2. qnamakerrc and 3. env variables
 *
 * @returns {Promise<*>}
 */
async function composeConfig() {
    const { QNA_MAKER_KBID, QNA_MAKER_SUBSCRIPTION_KEY, QNA_MAKER_ENDPOINT_BASE_PATH } = process.env;

    const {
        knowledgeBaseID: args_knowledgeBaseID,
        subscriptionKey: args_subscriptionKey,
        endpointBasePath: args_endpointBasePath
    } = args;

    let qnamakerrcJson = {};
    let config;
    try {
        await fs.access(path.join(process.cwd(), '.qnamakerrc'), fs.R_OK);
        qnamakerrcJson = await fs.readJson(path.join(process.cwd(), '.qnamakerrc'));
    } catch (e) {
        // Do nothing
    } finally {
        config = {
            knowledgeBaseID: (args_knowledgeBaseID || qnamakerrcJson.knowledgeBaseID || QNA_MAKER_KBID),
            subscriptionKey: (args_subscriptionKey || qnamakerrcJson.subscriptionKey || QNA_MAKER_SUBSCRIPTION_KEY),
            endpointBasePath: (args_endpointBasePath || qnamakerrcJson.endpointBasePath || QNA_MAKER_ENDPOINT_BASE_PATH)
        };
        validateConfig(config);
    }
    return config;
}

/**
 * Validates the config object to contain the
 * fields necessary for endpoint calls.
 *
 * @param {*} config The config object to validate
 */
function validateConfig(config) {
    // appId and versionId are not validated here since
    // not all operations require these to be present.
    // Validation of specific params are done in the
    // ServiceBase.js
    const { subscriptionKey, knowledgeBaseID, endpointBasePath } = config;
    const messageTail = `is missing from the configuration.\n\nDid you run ${chalk.cyan.bold('qnamaker --init')} yet?`;
    assert(typeof subscriptionKey === 'string', `The subscriptionKey ${messageTail}`);
    assert(typeof endpointBasePath === 'string', `The endpointBasePath ${messageTail}`);
}

/**
 * Provides basic validation of the command arguments.
 *
 * @param serviceManifest
 */
async function validateArguments(serviceManifest) {
    let error = new Error();
    let body = undefined;
    error.name = 'ArgumentError';
    if (!serviceManifest) {
        error.message = 'The operation does not exist';
        throw error;
    }

    const { operation } = serviceManifest;
    if (!operation) {
        error.message = 'The operation does not exist';

        throw error;
    }

    const entitySpecified = typeof args.in === 'string';
    const entityRequired = !!operation.entityName;

    if (!entityRequired && entitySpecified) {
        error.message = `The ${operation.name} operation does not accept an input`;

        throw error;
    }

    if (entityRequired) {
        if (entitySpecified) {
            body = await getFileInput(args);
        }
        else {
            switch (serviceManifest.operation.methodAlias) {
                case "ask":
                    body = {
                        question: args.question,
                        top: args.top
                    };
                    break;
                default:
                    error.message = `The ${operation.name} requires an input of type: ${operation.entityType}`;
                    throw error;
            }
        }
    }

    // Note that the ServiceBase will validate params that may be required.
    return body;
}

function getServiceManifest(args) {
    if (args._.length < 1)
        return null; //bail show help
    let verb = args._[0];
    let target = (args._.length >= 2) ? args._[1] : undefined;
    let arguments = (args._.length > 2) ? args._.slice(2) : [];

    let payload = getOperation(verb, target);
    return payload;
}


function getOperation(verb, target) {
    let operation;
    for (let apiGroupName in manifest) {
        let apiGroup = manifest[apiGroupName];
        for (let iOperation in apiGroup.operations) {
            let operation = apiGroup.operations[iOperation];

            if ((operation.methodAlias == verb) &&
                ((operation.target.length == 0 && !target) ||
                    (target && operation.target.indexOf(target.toLowerCase()) >= 0))) {
                return Object.assign({
                    operation: operation,
                    identifier: cc(apiGroup.className),
                }, apiGroup);
            }
        }
    }
    return null;
}

/**
 * Exits with a non-zero status and prints
 * the error if present or displays the help
 *
 * @param error
 */
async function handleError(error) {
    process.stdout.write('\n' + chalk.red.bold(error + '\n'));
//    if (error.name === 'ArgumentError') {
        await help(args);
//    }
    return 1;
}

runProgram()
    .then(process.exit)
    .catch(handleError)
    .then(process.exit);

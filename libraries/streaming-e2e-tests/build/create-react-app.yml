# Create a React app that uses ReactWebChat

steps:
  - powershell: npx create-react-app react-app
    displayName: 'create-react-app'
    workingDirectory: $(RootReactPiecesDir)
  
  # - task: Cache@2
  #   inputs:
  #     key: 'npm | “$(Agent.OS)” | $(RootReactPiecesDir)/react-app/yarn.lock'
  #     path: '$(RootReactPiecesDir)/react-app/node_modules'
  #     cacheHitVar: 'WcCacheRestored'

  - task: Cache@2
    displayName: Cache npm
    inputs:
      key: 'without-package-lock-dotenv-after-wc | npm | "$(Agent.OS)" '
      # restoreKeys: |
        # npm | "$(Agent.OS)"
      path: $(ReactProjectDir)/node_modules
      cacheHitVar: 'WcCacheRestored'
  
  - powershell: npm install botframework-webchat@4.9.2
    displayName: 'npm install botframework-webchat'
    workingDirectory: $(ReactProjectDir)
    condition: ne(variables.WcCacheRestored, 'true')

  - powershell: npm install dotenv
    displayName: 'npm install dotenv'
    workingDirectory: $(ReactProjectDir)

  
  - powershell: Remove-Item src/App.js, src/index.js, public/index.html
    displayName: "Delete files we're replacing with custom code in react app"
    workingDirectory: $(ReactProjectDir)

  - powershell: |
      copy ../custom-app-code/App.js, ../custom-app-code/index.js, ../custom-app-code/.gitignore ./src/
      copy ../custom-app-code/index.html ./public
    displayName: "Copy custom files into react-app"
    workingDirectory: $(ReactProjectDir)
  
  - powershell: |
      Add-Content -Path "./.env" -Value REACT_APP_BOT_HOSTNAME=$(BotName)
      Get-Content -Path "./.env"	
    displayName: "Write react-consumable bot name to .env"
    workingDirectory: $(ReactProjectDir)

  - task: PublishPipelineArtifact@1
    displayName: 'Publish Artifact: ReactApp'
    inputs:
      targetPath: $(ReactProjectDir)
      artifactName: 'ReactApp'

# Create a React app that uses ReactWebChat

steps:
  - powershell: npx create-react-app react-app
    displayName: 'create-react-app'
    workingDirectory: $(RootReactPiecesDir)
  
  - powershell: Remove-Item src/App.js, src/index.js, public/index.html, ./package.json, ./yarn.lock
    displayName: "Delete files we're replacing with custom code in react app"
    workingDirectory: $(RootReactPiecesDir)/react-app

  - powershell: |
      copy ../custom-app-code/App.js, ../custom-app-code/index.js, ../custom-app-code/.gitignore ./src/
      copy ../custom-app-code/index.html ./public
      copy ../custom-app-code/package.json, ../custom-app-code/yarn.lock
    displayName: "Copy custom files into react-app"
    workingDirectory: $(RootReactPiecesDir)/react-app
  
  # - task: PublishPipelineArtifact@1
  #   displayName: 'Publish Artifact: ReactApp'
  #   inputs:
  #     targetPath: $(RootReactPiecesDir)/react-app
  #     artifactName: 'ReactApp'

  - task: Cache@2
    displayName: Cache npm
    inputs:
      key: 'WebChatCache2 | npm | "$(Agent.OS)"'
      path: $(ReactProjectDir)/node_modules
      cacheHitVar: 'CacheRestored'
  
  - powershell: npm install botframework-webchat@4.9.2
    displayName: 'npm install botframework-webchat'
    condition: ne(variables.CacheRestored, 'true')
    workingDirectory: $(ReactProjectDir)
  
  # TEMP - Vanilla DLJS
  - powershell: yarn add botframework-directlinejs
    displayName: 'yarn add botframework-directlinejs'
    workingDirectory: $(ReactProjectDir)
  
  - powershell: start powershell {npm start}
    displayName: 'Serve react-app (npm start), opening new console'
    workingDirectory: $(ReactProjectDir)

  - powershell: npm test
    displayName: 'Run Tests: npm test'
    workingDirectory: $(TestsDir)

/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Mappers from "../models/userTokenMappers";
import * as Parameters from "../models/emulatorParameters";
import { OAuthApiClientContext } from "../oAuthApiClientContext";

const WebResource = msRest.WebResource;

/** Class representing a UserToken. */
export class Emulator {
  private readonly client: OAuthApiClientContext;
  private readonly serializer = new msRest.Serializer(Mappers);

  /**
   * Create a UserToken.
   * @param {OAuthApiClientContext} client Reference to the service client.
   */
  constructor(client: OAuthApiClientContext) {
    this.client = client;
  }

  /**
   * @summary EmulateOAuthCards
   *
   * Tells the token service to emulate the sending of OAuthCards.
   *
   * @param {boolean} emulate If `true` the token service will emulate the sending of OAuthCards.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  emulateOAuthCardsWithHttpOperationResponse(emulate: boolean): Promise<msRest.HttpOperationResponse> {
    let emulateStr = (!!emulate).toString();
    // Create HTTP transport objects
    const httpRequest = new WebResource();
    const operationArguments: msRest.OperationArguments = msRest.createOperationArguments(
        {
            emulate: emulateStr
        });
    
    return this.client.sendOperationRequest(
    httpRequest,
    operationArguments,
    {
        httpMethod: "GET",
        baseUrl: this.client.baseUri,
        path: "api/usertoken/emulateOAuthCards",
        queryParameters: [
        {
            parameterPath: "emulate",
            mapper: {
                required: true,
                serializedName: "emulate",
                type: {
                name: "String"
                }
            }
            }
        ],
        responses: {
        200: {
            bodyMapper: {
            serializedName: "parsedResponse",
            type: {
                name: "String"
            }
            }
        },
        default: {}
        },
        serializer: this.serializer
    });
  }
  
  /**
   * @param {boolean} emulate
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  emulateOAuthCards(emulate: boolean): Promise<msRest.HttpOperationResponse>;
  emulateOAuthCards(emulate: boolean, callback?: msRest.ServiceCallback<void>): any {
      let cb = callback as msRest.ServiceCallback<void>;
      if (!callback) {
        return this.emulateOAuthCardsWithHttpOperationResponse(emulate).then((operationRes: msRest.HttpOperationResponse) => {
          return Promise.resolve();
        }).catch((err: Error) => {
          return Promise.reject(err);
        });
      } else {
        msRest.promiseToCallback(this.emulateOAuthCardsWithHttpOperationResponse(emulate))((err: Error, data: msRest.HttpOperationResponse) => {
          if (err) {
            return cb(err);
          }
          return cb(err, undefined, data.request, data);
        });
      }
  }
}

export const EmulateOAuthCardsResponse: msRest.CompositeMapper = {
  serializedName: "EmulateOAuthCardsResponse",
  type: {
    name: "Composite",
    className: "EmulateOAuthCardsResponse",
    modelProperties: {
      result: {
        serializedName: "result",
        type: {
          name: "String"
        }
      }
    }
  }
};
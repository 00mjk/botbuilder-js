/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/userTokenMappers";
import * as Parameters from "../models/parameters";
import { OAuthApiClientContext } from "../oAuthApiClientContext";

/** Class representing a UserToken. */
export class UserToken {
  private readonly client: OAuthApiClientContext;

  /**
   * Create a UserToken.
   * @param {OAuthApiClientContext} client Reference to the service client.
   */
  constructor(client: OAuthApiClientContext) {
    this.client = client;
  }

  /**
   * @param {string} userId
   *
   * @param {string} connectionName
   *
   * @param {UserTokenGetTokenOptionalParams} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getTokenWithHttpOperationResponse(userId: string, connectionName: string, options?: Models.UserTokenGetTokenOptionalParams): Promise<msRest.HttpOperationResponse<Models.TokenResponse>> {
    return this.client.sendOperationRequest(
      {
        userId,
        connectionName,
        options
      },
      getTokenOperationSpec);
  }

  /**
   * @param {string} userId
   *
   * @param {string} connectionName
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  signOutWithHttpOperationResponse(userId: string, connectionName: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<any>> {
    return this.client.sendOperationRequest(
      {
        userId,
        connectionName,
        options
      },
      signOutOperationSpec);
  }

  /**
   * @param {string} userId
   *
   * @param {string} connectionName
   *
   * @param {UserTokenGetTokenOptionalParams} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.TokenResponse} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.TokenResponse} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getToken(userId: string, connectionName: string): Promise<Models.TokenResponse>;
  getToken(userId: string, connectionName: string, options: Models.UserTokenGetTokenOptionalParams): Promise<Models.TokenResponse>;
  getToken(userId: string, connectionName: string, callback: msRest.ServiceCallback<Models.TokenResponse>): void;
  getToken(userId: string, connectionName: string, options: Models.UserTokenGetTokenOptionalParams, callback: msRest.ServiceCallback<Models.TokenResponse>): void;
  getToken(userId: string, connectionName: string, options?: Models.UserTokenGetTokenOptionalParams, callback?: msRest.ServiceCallback<Models.TokenResponse>): any {
    return msRest.responseToBody(this.getTokenWithHttpOperationResponse.bind(this), userId, connectionName, options, callback);
  }

  /**
   * @param {string} userId
   *
   * @param {string} connectionName
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {any} [result]   - The deserialized result object if an error did not occur.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  signOut(userId: string, connectionName: string): Promise<any>;
  signOut(userId: string, connectionName: string, options: msRest.RequestOptionsBase): Promise<any>;
  signOut(userId: string, connectionName: string, callback: msRest.ServiceCallback<any>): void;
  signOut(userId: string, connectionName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<any>): void;
  signOut(userId: string, connectionName: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<any>): any {
    return msRest.responseToBody(this.signOutWithHttpOperationResponse.bind(this), userId, connectionName, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getTokenOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "api/usertoken/GetToken",
  queryParameters: [
    Parameters.userId,
    Parameters.connectionName,
    Parameters.code
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TokenResponse
    },
    404: {
      bodyMapper: Mappers.TokenResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const signOutOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "api/usertoken/SignOut",
  queryParameters: [
    Parameters.userId,
    Parameters.connectionName
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as Models from "botframework-schema";
import * as msRest from "ms-rest-js";
import { ConnectorClientContext } from "../connectorClientContext";
import * as Mappers from "../models/attachmentsMappers";
import * as Parameters from "../models/parameters";

/** Class representing a Attachments. */
export class Attachments {
  private readonly client: ConnectorClientContext;

  /**
   * Create a Attachments.
   * @param {ConnectorClientContext} client Reference to the service client.
   */
  constructor(client: ConnectorClientContext) {
    this.client = client;
  }

  /**
   * @summary GetAttachmentInfo
   *
   * Get AttachmentInfo structure describing the attachment views
   *
   * @param {string} attachmentId attachment id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAttachmentInfoWithHttpOperationResponse(attachmentId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<Models.AttachmentInfo>> {
    return this.client.sendOperationRequest(
      {
        attachmentId,
        options
      },
      getAttachmentInfoOperationSpec);
  }

  /**
   * @summary GetAttachment
   *
   * Get the named view as binary content
   *
   * @param {string} attachmentId attachment id
   *
   * @param {string} viewId View id from attachmentInfo
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse} The deserialized result object.
   *
   * @reject {Error|ServiceError} The error object.
   */
  getAttachmentWithHttpOperationResponse(attachmentId: string, viewId: string, options?: msRest.RequestOptionsBase): Promise<msRest.HttpOperationResponse<void>> {
    return this.client.sendOperationRequest(
      {
        attachmentId,
        viewId,
        options
      },
      getAttachmentOperationSpec);
  }

  /**
   * @summary GetAttachmentInfo
   *
   * Get AttachmentInfo structure describing the attachment views
   *
   * @param {string} attachmentId attachment id
   *
   * @param {RequestOptionsBase} [options] Optional Parameters.
   *
   * @param {ServiceCallback} callback The callback.
   *
   * @returns {ServiceCallback} callback(err, result, request, operationRes)
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *                      {Models.AttachmentInfo} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link Models.AttachmentInfo} for more information.
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *                      {HttpOperationResponse} [response] - The HTTP Response stream if an error did not occur.
   */
  getAttachmentInfo(attachmentId: string): Promise<Models.AttachmentInfo>;
  getAttachmentInfo(attachmentId: string, options: msRest.RequestOptionsBase): Promise<Models.AttachmentInfo>;
  getAttachmentInfo(attachmentId: string, callback: msRest.ServiceCallback<Models.AttachmentInfo>): void;
  getAttachmentInfo(attachmentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AttachmentInfo>): void;
  getAttachmentInfo(attachmentId: string, options?: msRest.RequestOptionsBase, callback?: msRest.ServiceCallback<Models.AttachmentInfo>): any {
    return msRest.responseToBody(this.getAttachmentInfoWithHttpOperationResponse.bind(this), attachmentId, options, callback);
  }

}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAttachmentInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v3/attachments/{attachmentId}",
  urlParameters: [
    Parameters.attachmentId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AttachmentInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAttachmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "v3/attachments/{attachmentId}/views/{viewId}",
  urlParameters: [
    Parameters.attachmentId,
    Parameters.viewId
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      }
    },
    301: {},
    302: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

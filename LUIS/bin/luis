#!/usr/bin/env node

global.fetch = require('node-fetch'); // Browser compatibility
const assert = require('assert');
const fs = require('fs-extra');
const path = require('path');
const readline = require('readline');
const minimist = require('minimist');
const chalk = require('chalk');

const help = require('../lib/help');
const luis = require('../lib');
const {getServiceManifest} = require('../lib/utils/argsUtil');

let args;

/**
 * Entry for the app
 *
 * @returns {Promise<void>}
 */
async function runProgram() {
    var a = process.argv.slice(2);
     if (!a || a.length == 0)
        a = ['-h'];
    args = minimist(a);
    if (args.init || args.i) {
        await initializeConfig();
        process.stdout.write(`Successfully wrote ${process.cwd()}/.luisrc`);
        return;
    }
    if (args.help ||
        args.h ||
        args['!'] ||
        args._.includes('help')) {
        return help(args);
    }
    if (args.version || args.v) {
        return process.stdout.write(require(path.join(__dirname, '../package.json')).version);
    }
    const config = await composeConfig();
    const serviceManifest = getServiceManifest(args);
    validateArguments(serviceManifest);

    const requestBody = await getFileInput(args);
    const result = await luis(config, serviceManifest, args, requestBody);
    if (result.error) {
        throw new Error(result.error.message);
    }
    process.stdout.write(JSON.stringify(result, null, 2));
}

/**
 * Walks the user though the creation of the .luisrc
 * file and writes it to disk. the App and Version IDs
 * are optional but if omitted, --appId and --versionId
 * flags may be required for some commands.
 *
 * @returns {Promise<*>}
 */
async function initializeConfig() {
    process.stdout.write(chalk.cyan.bold('\nThis util will walk you through creating a .luisrc file\n\nPress ^C at any time to quit.\n\n'));
    const questions = [
        'What is your LUIS App ID: ',
        'What is your LUIS Authoring key (from luis.ai portal User Settings page): ',
        'What is your LUIS Version ID (Default: 0.1): ',
        'What region [(Default) westus, westeurope, australiaeast] : ',
    ];

    const prompt = readline.createInterface({
        input: process.stdin,
        output: process.stdout,
    });

    const answers = [];
    for (let question of questions) {
        const answer = await new Promise((resolve) => {
            prompt.question(question, response => {
                resolve(response);
            });
        });
        answers.push(answer);
    }

    const [appId, authoringKey, versionId, location] = answers;
    const config = Object.assign({}, {
        appId,
        authoringKey,
        versionId,
        endpointBasePath: `https://${location}.api.cognitive.microsoft.com/luis/api/v2.0`,
    });
    try {
        await new Promise((resolve, reject) => {
            const confirmation = `\n\nDoes this look ok?\n${JSON.stringify(config, null, 2)}\nYes/No: `;
            prompt.question(confirmation, response => {
                /^(y|yes)$/.test((response || '').toLowerCase()) ? resolve(response) : reject();
            });
        });
    } catch (e) {
        return null;
    }

    return fs.writeJson(path.join(process.cwd(), '.luisrc'), config, {spaces: 2});
}

/**
 * Retrieves the input file to send as
 * the body of the request.
 *
 * @param args
 * @returns {Promise<*>}
 */
async function getFileInput(args) {
    if (typeof args.in !== 'string') {
        return null;
    }
    // Let any errors fall through to the runProgram() promise
    return await fs.readJson(path.resolve(args.in));
}

/**
 * Composes the config from the 3 sources that it may reside.
 * Precedence is 1. Arguments, 2. luisrc and 3. env variables
 *
 * @returns {Promise<*>}
 */
async function composeConfig() {
    const {LUIS_APP_ID, LUIS_ACCESS_KEY, LUIS_VERSION_ID, LUIS_ENDPOINT_BASE_PATH} = process.env;

    const {
        appId: args_appId,
        authoringKey: args_authoringKey,
        versionId: args_versionId,
        endpointBasePath: args_endpointBasePath
    } = args;

    let luisrcJson = {};
    let config;
    try {
        await fs.access(path.join(process.cwd(), '.luisrc'), fs.R_OK);
        luisrcJson = await fs.readJson(path.join(process.cwd(), '.luisrc'));
    } catch (e) {
        // Do nothing
    } finally {
        config = {
            appId: (args_appId || luisrcJson.appId || LUIS_APP_ID),
            authoringKey: (args_authoringKey || luisrcJson.authoringKey || LUIS_ACCESS_KEY),
            versionId: (args_versionId || luisrcJson.versionId || LUIS_VERSION_ID),
            endpointBasePath: (args_endpointBasePath || luisrcJson.endpointBasePath || LUIS_ENDPOINT_BASE_PATH)
        };
        validateConfig(config);
    }
    return config;
}

/**
 * Validates the config object to contain the
 * fields necessary for endpoint calls.
 *
 * @param {*} config The config object to validate
 */
function validateConfig(config) {
    const {versionId, appId, authoringKey, endpointBasePath} = config;
    const messageTail = `is missing from the configuration.\n\nDid you run ${chalk.cyan.bold('luis --init')} yet?`;

    assert(typeof appId === 'string', `The appId ${messageTail}`);
    assert(typeof authoringKey === 'string', `The authoringKey  ${messageTail}`);
    assert(typeof versionId === 'string', `The versionId ${messageTail}`);
    assert(typeof endpointBasePath === 'string', `The endpointBasePath ${messageTail}`);
}

/**
 * Provides basic validation of the command arguments.
 *
 * @param serviceManifest
 */
function validateArguments(serviceManifest) {
    let error = new Error();
    error.name = 'ArgumentError';
    if (!serviceManifest) {
        error.message = 'The service does not exist';
        throw error;
    }

    const {operation} = serviceManifest;
    if (!operation) {
        error.message = 'The operation does not exist';

        throw error;
    }

    const entitySpecified = typeof args.in === 'string';
    const entityRequired = !!operation.entityName;

    if (!entityRequired && entitySpecified) {
        error.message = `The ${operation.name} operation does not accept an input`;

        throw error;
    }

    if (entityRequired && !entitySpecified) {
        error.message = `The ${operation.name} requires an input of type: ${operation.entityType}`;

        throw error;
    }

    // Note that the ServiceBase will validate params that may be required.
}

/**
 * Exits with a non-zero status and prints
 * the error if present or displays the help
 *
 * @param error
 */
async function handleError(error) {
    process.stdout.write('\n' + chalk.red.bold(error + '\n'));
    if (error.name === 'ArgumentError') {
        await help(args);
    }
    return 1;
}

runProgram()
    .then(process.exit)
    .catch(handleError)
    .then(process.exit);